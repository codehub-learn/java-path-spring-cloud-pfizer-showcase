server:
  port: 8200
spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      discovery:
        locator:
          lower-case-service-id: true
          enabled: true
      routes:
        - id: catalog-service
          uri: lb://catalog-service
          predicates:
            - Path=/products/**
            - Method=GET,POST,PUT,DELETE
        - id: catalog-service
          uri: lb://catalog-service
          predicates:
            - Path=/categories/**
        - id: customer-service
          uri: lb://customer-service
          predicates:
            - Path=/customers/**
        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/orders/**
    loadbalancer:
      configurations: health-check

management:
  endpoint:
    shutdown:
      enabled: true # Remote shutdown of the application
    health:
      show-details: always # See the following: https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-health
      group:
        custom:
          include: diskSpace, ping # Custom group which contains components the developer defines
      cache:
        time-to-live: "30s" # Health endpoint is cached for 30 seconds
  endpoints:
    enabled-by-default: true
    web:
      base-path: /actuator # Default discovery URL is /actuator but we can even set it to /management/actuator
      discovery:
        enabled: true
      exposure:
        # Or use the following: health,info,metrics,loggers,auditevents,sessions
        # You can even do the opposite, include everything and then exclude the ones you don't want to expose
        include: "*"

eureka:
  client:
    fetch-registry: true
    refresh:
      enable: false
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8100/eureka/
    rest-template-timeout:
      connect-timeout: 5000
      connect-request-timeout: 8000
      socket-timeout: 10000
  instance:
    lease-renewal-interval-in-seconds: 30
    instance-id: ${spring.application.name}-${random.value}
